REDIS CONNECTION
import Redis from "ioredis";

// Create Redis instance
const redis = new Redis(process.env.REDIS_URL || "redis://localhost:6379");

export default redis;



OTP GENERATION:
import { NextResponse } from "next/server";
import redis from "@/lib/redis"; // Import Redis connection

const OTP_EXPIRY_TIME = 30; // Expire in 30 seconds

export async function POST(req: Request) {
  try {
    const { phone } = await req.json();

    if (!phone || phone.length !== 10) {
      return NextResponse.json({ error: "Invalid phone number" }, { status: 400 });
    }

    // Generate a 6-digit OTP
    const otp = Math.floor(100000 + Math.random() * 900000).toString();

    // Store OTP in Redis with expiry
    await redis.setex(`otp:${phone}`, OTP_EXPIRY_TIME, otp);

    return NextResponse.json({ success: true, message: "OTP sent", otp }); // Remove OTP in production!
  } catch (error) {
    return NextResponse.json({ error: "Server error" }, { status: 500 });
  }
}



OTP VERIFICATION:
export async function PUT(req: Request) {
  try {
    const { phone, otp } = await req.json();

    if (!phone || !otp) {
      return NextResponse.json({ error: "Phone and OTP are required" }, { status: 400 });
    }

    // Get OTP from Redis
    const storedOtp = await redis.get(`otp:${phone}`);

    if (!storedOtp) {
      return NextResponse.json({ error: "OTP expired or invalid" }, { status: 400 });
    }

    if (storedOtp !== otp) {
      return NextResponse.json({ error: "Incorrect OTP" }, { status: 400 });
    }

    // OTP matched, delete from Redis
    await redis.del(`otp:${phone}`);

    return NextResponse.json({ success: true, message: "OTP verified" });
  } catch (error) {
    return NextResponse.json({ error: "Server error" }, { status: 500 });
  }
}

